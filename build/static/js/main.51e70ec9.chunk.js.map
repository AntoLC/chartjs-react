{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","data_camembert","labels","datasets","data","backgroundColor","hoverBackgroundColor","data_chart","label","x","y","r","className","options","responsive","maintainAspectRatio","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KA8GeA,MA1Gf,WACC,IAAMC,EAAiB,CACtBC,OAAQ,CACP,MACA,QACA,UAEDC,SAAU,CAAC,CACVC,KAAM,CAAC,IAAK,GAAI,KAChBC,gBAAiB,CAAC,UAAW,UAAW,WACxCC,qBAAsB,CAAC,UAAU,UAAU,cAiBvCC,EAAa,CAClBJ,SAAU,CACT,CACEK,MAAO,OACPJ,KAAM,CACP,CACEK,EAAG,EACHC,EAAG,EACHC,EAAG,KAGJN,gBAAiB,CAAC,WAClBC,qBAAsB,QAExB,CACEE,MAAO,OACRJ,KAAM,CACJ,CACDK,EAAG,EACHC,EAAG,EACHC,EAAG,KAGJN,gBAAiB,CAAC,WAClBC,qBAAsB,QAEvB,CACEE,MAAO,SACRJ,KAAM,CACJ,CACDK,EAAG,EACHC,EAAG,EACHC,EAAG,KAGJN,gBAAiB,CAAC,WAClBC,qBAAsB,QAEvB,CACEE,MAAO,QACRJ,KAAM,CACJ,CACDK,EAAG,EACHC,EAAG,EACHC,EAAG,KAGJN,gBAAiB,CAAC,WAClBC,qBAAsB,UAKzB,OACC,yBAAKM,UAAU,OACd,0CACA,yBAAKA,UAAU,mBACd,kBAAC,IAAD,CAAUR,KAAMH,EAAgBY,QAAS,CACxCC,YAAY,EACZC,qBAAqB,KAEtB,kBAAC,IAAD,CAAOX,KAAMH,EAAgBY,QAAS,CACrCC,YAAY,EACZC,qBAAqB,KAEtB,kBAAC,IAAD,CAAQX,KAAMG,EAAYM,QAAS,CAClCC,YAAY,EACZC,qBAAqB,KAEtB,kBAAC,IAAD,CAAeX,KAAMG,EAAYM,QAAS,CACzCC,YAAY,EACZC,qBAAqB,QC1FNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.51e70ec9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Doughnut, Bubble, Polar , HorizontalBar } from 'react-chartjs-2';\n \nfunction App() {\n\tconst data_camembert = {\n\t\tlabels: [\n\t\t\t'Red',\n\t\t\t'Green',\n\t\t\t'Yellow'\n\t\t],\n\t\tdatasets: [{\n\t\t\tdata: [300, 50, 100],\n\t\t\tbackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n\t\t\thoverBackgroundColor: ['#FF6384','#36A2EB','#FFCE56']\n\t\t}]\n\t};\n\n\t/*const data_chart = {\n\t\tlabels: [\n\t\t\t'Red',\n\t\t\t'Green',\n\t\t\t'Yellow'\n\t\t],\n\t\tdatasets: [{\n\t\t\tdata: [300, 50, 100],\n\t\t\tbackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n\t\t\thoverBackgroundColor: ['#FF6384','#36A2EB','#FFCE56']\n\t\t}]\n\t};*/\n\n\tconst data_chart = {\n\t\tdatasets: [\n\t\t\t{\n\t\t\t  label: 'John',\n\t\t\t  data: [\n\t\t\t\t{\n\t\t\t\t  x: 3,\n\t\t\t\t  y: 7,\n\t\t\t\t  r: 10\n\t\t\t\t}\n\t\t\t  ],\n\t\t\t  backgroundColor: ['#36A2EB'],\n\t\t\t  hoverBackgroundColor: \"#333\"\n\t\t\t},\n\t\t\t{\n\t\t\t  label: 'Paul',\n\t\t\t\tdata: [\n\t\t\t\t  {\n\t\t\t\t\tx: 6,\n\t\t\t\t\ty: 2,\n\t\t\t\t\tr: 10\n\t\t\t\t  }\n\t\t\t\t],\n\t\t\t\tbackgroundColor: ['#FF6384'],\n\t\t\t\thoverBackgroundColor: \"#666\"\n\t\t\t},\n\t\t\t{\n\t\t\t  label: 'George',\n\t\t\t\tdata: [\n\t\t\t\t  {\n\t\t\t\t\tx: 2,\n\t\t\t\t\ty: 6,\n\t\t\t\t\tr: 10\n\t\t\t\t  }\n\t\t\t\t],\n\t\t\t\tbackgroundColor: ['#FFCE56'],\n\t\t\t\thoverBackgroundColor: \"#888\"\n\t\t\t},\n\t\t\t{\n\t\t\t  label: 'Ringo',\n\t\t\t\tdata: [\n\t\t\t\t  {\n\t\t\t\t\tx: 5,\n\t\t\t\t\ty: 3,\n\t\t\t\t\tr: 10\n\t\t\t\t  }\n\t\t\t\t],\n\t\t\t\tbackgroundColor: ['#FF3452'],\n\t\t\t\thoverBackgroundColor: \"#ccc\"\n\t\t\t}\n\t\t]\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<p>Hello World</p>\n\t\t\t<div className=\"container-chart\">\n\t\t\t\t<Doughnut data={data_camembert} options={{\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: true,\n\t\t\t\t}}/>\n\t\t\t\t<Polar data={data_camembert} options={{\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: true,\n\t\t\t\t}}/>\n\t\t\t\t<Bubble data={data_chart} options={{\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: true,\n\t\t\t\t}}/>\n\t\t\t\t<HorizontalBar data={data_chart} options={{\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: true,\n\t\t\t\t}}/>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}